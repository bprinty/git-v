#!/usr/bin/env sh
#
# git plugin for managing version numbering
#
# @author <bprinty@gmail.com>
# ------------------------------------------------


# meta
# ----
usage() {
    echo "usage: git v [--version] [--help] [--reset] <command> [<args>]"
    echo
    echo "Available subcommands are:"
    echo "  add       Add file to be tracked by git-v."
    echo "  remove    Remove file for tracking via git-v."
    echo "  list      List version information for tracked files."
    echo "  up        Increment version numbers for tracked files."
    echo "  down      Decrement version numbers for tracked files."
    echo "  rc        Add release cycle commit hash on version number for tracked files."
    echo "  tag       Create tag for repo from tracked version number."
    echo
}

version() {
    echo "0.1.1"
}


# exec
# ----
main() {
    if [ "$#" -lt 1 ]; then
        usage; exit 1
    fi

    local subcommand="$1"; shift

    case $subcommand in
        "-h"|"--help")
            usage; exit 0
            ;;
        "-v"|"--version")
            version; exit 0
            ;;
        "-r"|"--reset")
            rm -rf "$base/.git/version"; exit 0
            ;;
    esac

    # set up git working directory
    local workingdir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
    if [ ! -e "$workingdir/git-v-$subcommand" ]; then
        usage; exit 1
    fi

    # ensure user is inside git repository
    if [ ! -e "$base" ]; then
        exit 1
    fi

    # create directory if not exists
    if [ ! -e "$base/.git/version" ]; then
        mkdir "$base/.git/version"
    fi
    touch "$marks"

    # quietly add default files to marks (if they exist)
    if [ -e "$base/.version" ]; then
      bash -c "\"$workingdir/git-v-add\" \"$base/.version\" &>/dev/null"
    fi
    if [ -e "$base/package.json" ]; then
      bash -c "\"$workingdir/git-v-add\" \"$base/package.json\" &>/dev/null"
    fi
    if [ -e "$base"/*/__init__.py ]; then
      bash -c "\"$workingdir/git-v-add\" \"$base\"/*/__init__.py &>/dev/null"
    fi

    # remove bad marks
    for i in `cat $marks`; do
      if [ ! -f $i ]; then
        bash -c "\"$workingdir/git-v-remove\" \"$i\" &>/dev/null"
      fi
    done

    # run subcommand
    sh "$workingdir/git-v-$subcommand" "$@"
}

base=`git rev-parse --show-toplevel`
marks="$base/.git/version/marks"
main "$@"
